{
  "info": {
    "name": "Brands API Testing",
    "description": "Comprehensive test collection for GET /brands endpoint",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "item": [
    {
      "name": "Get All Brands - Valid Request",
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{base_url}}/brands",
          "host": ["{{base_url}}"],
          "path": ["brands"]
        }
      },
      "response": [],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test(\"Response time is less than 2000ms\", function () {",
              "    pm.expect(pm.response.responseTime).to.be.below(2000);",
              "});",
              "",
              "pm.test(\"Response is an array\", function () {",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.be.an('array');",
              "});",
              "",
              "pm.test(\"Each brand has required fields\", function () {",
              "    const jsonData = pm.response.json();",
              "    if (jsonData.length > 0) {",
              "        const brand = jsonData[0];",
              "        pm.expect(brand).to.have.property('id');",
              "        pm.expect(brand).to.have.property('name');",
              "        pm.expect(brand).to.have.property('slug');",
              "    }",
              "});"
            ]
          }
        }
      ]
    },
    {
      "name": "Get All Brands - Check Content Type",
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{base_url}}/brands",
          "host": ["{{base_url}}"],
          "path": ["brands"]
        }
      },
      "response": [],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Content-Type is application/json\", function () {",
              "    pm.response.to.have.header(\"Content-Type\");",
              "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
              "});"
            ]
          }
        }
      ]
    },
    {
      "name": "Get All Brands - Performance Test",
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{base_url}}/brands",
          "host": ["{{base_url}}"],
          "path": ["brands"]
        }
      },
      "response": [],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Response time is acceptable\", function () {",
              "    pm.expect(pm.response.responseTime).to.be.below(1000);",
              "});",
              "",
              "pm.test(\"Response size is reasonable\", function () {",
              "    const responseSize = pm.response.size().body;",
              "    pm.expect(responseSize).to.be.below(100000); // 100KB limit",
              "});"
            ]
          }
        }
      ]
    },
    {
      "name": "Get All Brands - Error Handling Test",
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{base_url}}/brands",
          "host": ["{{base_url}}"],
          "path": ["brands"]
        }
      },
      "response": [],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"API should not return 500 error\", function () {",
              "    pm.expect(pm.response.code).to.not.equal(500);",
              "});",
              "",
              "pm.test(\"API should not return 404 error\", function () {",
              "    pm.expect(pm.response.code).to.not.equal(404);",
              "});"
            ]
          }
        }
      ]
    },
    {
      "name": "Get All Brands - Data Validation Test",
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{base_url}}/brands",
          "host": ["{{base_url}}"],
          "path": ["brands"]
        }
      },
      "response": [],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Response is valid JSON\", function () {",
              "    pm.response.to.be.json;",
              "});",
              "",
              "pm.test(\"Response structure is correct\", function () {",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.be.an('array');",
              "});"
            ]
          }
        }
      ]
    }
  ],
  "variable": [
    {
      "key": "base_url",
      "value": "http://localhost:8091"
    }
  ]
}
