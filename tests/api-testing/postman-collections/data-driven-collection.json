{
  "info": {
    "name": "Data-Driven API Testing Collection",
    "description": "Collection for data-driven testing of The Toolshop API endpoints",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "variable": [
    {
      "key": "base_url",
      "value": "http://localhost:8091",
      "type": "string"
    },
    {
      "key": "endpoint",
      "value": "",
      "type": "string"
    },
    {
      "key": "query_params",
      "value": "",
      "type": "string"
    },
    {
      "key": "request_body",
      "value": "",
      "type": "string"
    },
    {
      "key": "expected_status",
      "value": "200",
      "type": "string"
    },
    {
      "key": "expected_response_structure",
      "value": "array",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "GET /brands",
      "request": {
        "method": "GET",
        "header": [
          {
            "key": "Accept",
            "value": "application/json"
          }
        ],
        "url": {
          "raw": "{{base_url}}/brands{{query_params}}",
          "host": ["{{base_url}}"],
          "path": ["brands"],
          "query": []
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "// Data-driven test for brands endpoint",
              "pm.test(\"Status code is \" + pm.variables.get(\"expected_status\"), function () {",
              "    pm.response.to.have.status(parseInt(pm.variables.get(\"expected_status\")));",
              "});",
              "",
              "pm.test(\"Response time is less than 2000ms\", function () {",
              "    pm.expect(pm.response.responseTime).to.be.below(2000);",
              "});",
              "",
              "pm.test(\"Content-Type is application/json\", function () {",
              "    pm.response.to.have.header(\"Content-Type\");",
              "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
              "});",
              "",
              "pm.test(\"Response structure is valid\", function () {",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.be.an(pm.variables.get(\"expected_response_structure\"));",
              "});",
              "",
              "pm.test(\"Brands have required properties\", function () {",
              "    const jsonData = pm.response.json();",
              "    if (jsonData && jsonData.length > 0) {",
              "        const firstBrand = jsonData[0];",
              "        pm.expect(firstBrand).to.have.property('id');",
              "        pm.expect(firstBrand).to.have.property('name');",
              "        pm.expect(firstBrand).to.have.property('slug');",
              "    }",
              "});"
            ]
          }
        }
      ]
    },
    {
      "name": "POST /brands",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Accept",
            "value": "application/json"
          },
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{{request_body}}"
        },
        "url": {
          "raw": "{{base_url}}/brands",
          "host": ["{{base_url}}"],
          "path": ["brands"]
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "// Data-driven test for POST brands endpoint",
              "pm.test(\"Status code is \" + pm.variables.get(\"expected_status\"), function () {",
              "    pm.response.to.have.status(parseInt(pm.variables.get(\"expected_status\")));",
              "});",
              "",
              "pm.test(\"Response time is less than 3000ms\", function () {",
              "    pm.expect(pm.response.responseTime).to.be.below(3000);",
              "});",
              "",
              "pm.test(\"Content-Type is application/json\", function () {",
              "    pm.response.to.have.header(\"Content-Type\");",
              "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
              "});",
              "",
              "pm.test(\"Response structure is valid\", function () {",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.be.an(pm.variables.get(\"expected_response_structure\"));",
              "});",
              "",
              "pm.test(\"Created brand has required properties\", function () {",
              "    const jsonData = pm.response.json();",
              "    if (jsonData && typeof jsonData === 'object') {",
              "        pm.expect(jsonData).to.have.property('id');",
              "        pm.expect(jsonData).to.have.property('name');",
              "        pm.expect(jsonData).to.have.property('slug');",
              "        if (jsonData.description) {",
              "            pm.expect(jsonData).to.have.property('description');",
              "        }",
              "    }",
              "});"
            ]
          }
        }
      ]
    },
    {
      "name": "GET /products",
      "request": {
        "method": "GET",
        "header": [
          {
            "key": "Accept",
            "value": "application/json"
          }
        ],
        "url": {
          "raw": "{{base_url}}/products{{query_params}}",
          "host": ["{{base_url}}"],
          "path": ["products"],
          "query": []
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "// Data-driven test for products endpoint",
              "pm.test(\"Status code is \" + pm.variables.get(\"expected_status\"), function () {",
              "    pm.response.to.have.status(parseInt(pm.variables.get(\"expected_status\")));",
              "});",
              "",
              "pm.test(\"Response time is less than 3000ms\", function () {",
              "    pm.expect(pm.response.responseTime).to.be.below(3000);",
              "});",
              "",
              "pm.test(\"Content-Type is application/json\", function () {",
              "    pm.response.to.have.header(\"Content-Type\");",
              "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
              "});",
              "",
              "pm.test(\"Response structure is valid\", function () {",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.be.an(pm.variables.get(\"expected_response_structure\"));",
              "    pm.expect(jsonData).to.have.property('data');",
              "    pm.expect(jsonData).to.have.property('current_page');",
              "    pm.expect(jsonData).to.have.property('per_page');",
              "    pm.expect(jsonData).to.have.property('total');",
              "});",
              "",
              "pm.test(\"Products have required properties\", function () {",
              "    const jsonData = pm.response.json();",
              "    if (jsonData.data && jsonData.data.length > 0) {",
              "        const firstProduct = jsonData.data[0];",
              "        pm.expect(firstProduct).to.have.property('id');",
              "        pm.expect(firstProduct).to.have.property('name');",
              "        pm.expect(firstProduct).to.have.property('price');",
              "        pm.expect(firstProduct).to.have.property('category_id');",
              "        pm.expect(firstProduct).to.have.property('brand_id');",
              "    }",
              "});"
            ]
          }
        }
      ]
    },
    {
      "name": "GET /categories",
      "request": {
        "method": "GET",
        "header": [
          {
            "key": "Accept",
            "value": "application/json"
          }
        ],
        "url": {
          "raw": "{{base_url}}/categories{{query_params}}",
          "host": ["{{base_url}}"],
          "path": ["categories"],
          "query": []
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "// Data-driven test for categories endpoint",
              "pm.test(\"Status code is \" + pm.variables.get(\"expected_status\"), function () {",
              "    pm.response.to.have.status(parseInt(pm.variables.get(\"expected_status\")));",
              "});",
              "",
              "pm.test(\"Response time is less than 2000ms\", function () {",
              "    pm.expect(pm.response.responseTime).to.be.below(2000);",
              "});",
              "",
              "pm.test(\"Content-Type is application/json\", function () {",
              "    pm.response.to.have.header(\"Content-Type\");",
              "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
              "});",
              "",
              "pm.test(\"Response structure is valid\", function () {",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.be.an(pm.variables.get(\"expected_response_structure\"));",
              "});",
              "",
              "pm.test(\"Categories have required properties\", function () {",
              "    const jsonData = pm.response.json();",
              "    if (jsonData && jsonData.length > 0) {",
              "        const firstCategory = jsonData[0];",
              "        pm.expect(firstCategory).to.have.property('id');",
              "        pm.expect(firstCategory).to.have.property('name');",
              "        pm.expect(firstCategory).to.have.property('slug');",
              "    }",
              "});"
            ]
          }
        }
      ]
    }
  ]
}
